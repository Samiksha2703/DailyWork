Arrays Practice Problems 

1. Write a program in the following steps 
a. Generates 10 Random 3 Digit number. 
b. Store the random numbers into an array. 
c. Then find the 2nd largest and the 2nd smallest element without sorting the array. 

Solution : 

#!/bin/bash/
 
array=() 

for (( i=0; i<10; i++ )) 
do 
	RandomNo=$(( $RANDOM % 100 + 100 )) 

	array[$i]=$RandomNo 
done 

echo "Values in array are ${array[@]}" 

max=${array[0]} 
min=${array[0]} 

for (( j=0; j<10; j++ )) 
do 

if [ ${array[j]} -gt $max ] 
	then 
	max=${array[j]} 
fi 

if [ ${array[j]} -lt $min ] 
	then 
	min=${array[j]} 
fi 

done 

echo "maximum = $max minimum = $min" 

Output : 

$ ./NoSort.sh 
./NoSort.sh: line 8: Values in array are ${array[@] \n}: bad substitution maximum = 194 minimum = 115 

Output : 

$ ./NoSort.sh 
Values in array are 190 189 101 186 148 167 159 173 146 142 
maximum = 190 minimum = 101

2. Extend the above program to sort the array and then find the 2nd largest and the 2nd smallest element. 

Solution : 

#!/bin/bash/
 
array=() 

for (( i=0; i<10; i++ )) 
do 
	RandomNo=$(( $RANDOM % 100 + 100 )) 

	array[$i]=$RandomNo 
done 

echo "Values in array before sorting are ${array[@]}" 

length=${#array[@]}
max=${array[0]} 
min=${array[0]} 

for (( j=$(( $length - 1 )); j>=0; j-- )); 
do 
	for (( k=1; k<=j; k++ )); 
	do 
		if [[ ${array[k-1]} -gt ${array[k]} ]] 
		then 
		temp="${array[k-1]}" 
		array[k-1]="${array[k]}" 
		array[k]="$temp" 
fi 

done 

done 

echo "Values in array after sorting ${array[@]}" 

echo "Second largest value is : ${array[$length-2]}"

echo "Second smallest value is : ${array[1]}"

Output : 

$ ./NoSort.sh 
Values in array before sorting are 131 112 114 156 196 194 163 145 181 188 Values in array after sorting 112 114 131 145 156 163 181 188 194 196 

Output : 

$ ./NoSort.sh 
Values in array before sorting are 153 198 127 157 100 108 100 190 165 108 Values in array after sorting 100 100 108 108 127 153 157 165 190 198 

3. Extend the Prime Factorization Program to store all the Prime Factors of a number n into an array and finally display the output.

Solution: 

#!/bin/bash/ 

count=0 
flag=0 
k=0 
array=() 

echo "Enter an integer : " 

read int 

if [ $int -le 1 ] 
	then 
	echo "Not allowed!" 
	exit 
fi 

for (( i=2; i<=int; i++ )) 
do 
	if [ $(( $int % $i )) -eq 0 ] 
	then 
	factor=$i 
		for (( j=2; j<$factor; j++ )) 
		do 
			check=$(( $factor % $j )) 
				if [ $check -eq 0 ] 
					then 
					flag=1 
					break 
				fi 
		done 
		
		if [ $flag -eq 0 ] 
			then 
			array[$k]=$factor 
			k=$(( $k + 1 )) 
			count=1 
		fi 
	fi 
done 

if [ $count -eq 0 ] 
	then 
	echo "No prime factors found except 1 and $input" 
else 
	echo "The prime factors of the number : ${array[@]}" 
fi

Output : 

$ ./PrintPrimeFactor.sh 
Enter an integer : 
21 
The prime factors of the number : 3 7 

Output : 

$ ./PrintPrimeFactor.sh 
Enter an integer : 
12 
The prime factors of the number : 2 3 

4. Write a Program to show Sum of three Integer adds to ZERO Solution: 

#!/bin/bash/  

array=(0 -1 2 -3 1) 

triplet=0 

length=${#array[@]} 

echo "The array elements are ${array[@]}" 

for (( i=0; i<$length-2; i++ )) 
do 
	for (( j=i+1; j<$length-1; j++ )) 
	do 
		for (( k=j+1; k<$length; k++ )) 
		do 
			if [[ $(( ${array[i]} + ${array[j]} + ${array[k]} )) == $triplet ]] 				then 
				echo "Triplets ( ${array[i]} ${array[j]} ${array[k]} )" 
			fi 
		done 
	done 
done 

Output : 

$ ./Triplet.sh 
The array elements are 0 -1 2 -3 1 
Triplets ( 0 -1 1 ) 
Triplets ( 2 -3 1 )

5. Take a range from 0 â€“ 100, find the digits that are repeated twice like 33, 77, etc and store them in an array 

Solution: 

#!/bin/bash/ 

array=() 
count=0 

for i in $(seq 100) 
do 
	if [ $(( $i % 11 )) -eq 0 ] 
		then 
		array[count]=$i 
		count=`expr $count + 1` 
	fi 
done 

echo "Array elements are ${array[@]}" 

Output : 

$ ./NoRepeatedTwice.sh 
Array elements are 11 22 33 44 55 66 77 88 99
